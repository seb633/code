<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\GD32F303.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\GD32F303.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue May 30 18:01:13 2023
<BR><P>
<H3>Maximum Stack Usage =        176 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TaskStart(void*) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[26]">ADC0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">ADC0_1_IRQHandler</a><BR>
 <LI><a href="#[e]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">BusFault_Handler</a><BR>
 <LI><a href="#[c]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">HardFault_Handler</a><BR>
 <LI><a href="#[d]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">MemManage_Handler</a><BR>
 <LI><a href="#[f]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[26]">ADC0_1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[43]">ADC2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[e]">BusFault_Handler</a> from gd32f30x_it.o(i.BusFault_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2a]">CAN0_EWMC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[29]">CAN0_RX1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1f]">DMA0_Channel0_IRQHandler</a> from arch.o(i.DMA0_Channel0_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[20]">DMA0_Channel1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[21]">DMA0_Channel2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[22]">DMA0_Channel3_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[23]">DMA0_Channel4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[24]">DMA0_Channel5_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[25]">DMA0_Channel6_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4c]">DMA1_Channel0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4d]">DMA1_Channel1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4e]">DMA1_Channel2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4f]">DMA1_Channel3_4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[11]">DebugMon_Handler</a> from gd32f30x_it.o(i.DebugMon_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[44]">EXMC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1a]">EXTI0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3c]">EXTI10_15_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1b]">EXTI1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1c]">EXTI2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1d]">EXTI3_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1e]">EXTI4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2b]">EXTI5_9_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[18]">FMC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[c]">HardFault_Handler</a> from gd32f30x_it.o(i.HardFault_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[34]">I2C0_ER_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[33]">I2C0_EV_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[36]">I2C1_ER_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[35]">I2C1_EV_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[15]">LVD_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[d]">MemManage_Handler</a> from gd32f30x_it.o(i.MemManage_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[b]">NMI_Handler</a> from gd32f30x_it.o(i.NMI_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[12]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[19]">RCU_CTC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3d]">RTC_Alarm_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[17]">RTC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[a]">Reset_Handler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[45]">SDIO_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[37]">SPI0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[38]">SPI1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[47]">SPI2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[10]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[13]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[50]">SystemInit</a> from system_gd32f30x.o(i.SystemInit) referenced from startup_gd32f30x_hd.o(.text)
 <LI><a href="#[16]">TAMPER_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2c]">TIMER0_BRK_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2f]">TIMER0_Channel_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2e]">TIMER0_TRG_CMT_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2d]">TIMER0_UP_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[30]">TIMER1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[31]">TIMER2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[32]">TIMER3_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[46]">TIMER4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4a]">TIMER5_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4b]">TIMER6_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3f]">TIMER7_BRK_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[42]">TIMER7_Channel_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[41]">TIMER7_TRG_CMT_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[40]">TIMER7_UP_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[48]">UART3_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[49]">UART4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[39]">USART0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3a]">USART1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3b]">USART2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[27]">USBD_HP_CAN0_TX_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[28]">USBD_LP_CAN0_RX0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3e]">USBD_WKUP_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[f]">UsageFault_Handler</a> from gd32f30x_it.o(i.UsageFault_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[14]">WWDGT_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[56]">Task1s(void*)</a> from apptaskos.o(i._Z6Task1sPv) referenced from apptaskos.o(i._Z9TaskStartPv)
 <LI><a href="#[53]">Task2ms(void*)</a> from apptaskos.o(i._Z7Task2msPv) referenced from apptaskos.o(i._Z9TaskStartPv)
 <LI><a href="#[54]">Task10ms(void*)</a> from apptaskos.o(i._Z8Task10msPv) referenced from apptaskos.o(i._Z9TaskStartPv)
 <LI><a href="#[55]">Task100ms(void*)</a> from apptaskos.o(i._Z9Task100msPv) referenced from apptaskos.o(i._Z9TaskStartPv)
 <LI><a href="#[52]">TaskStart(void*)</a> from apptaskos.o(i._Z9TaskStartPv) referenced from apptaskos.o(i.TaskCreat)
 <LI><a href="#[5a]">standard::FastChk()</a> from standard.o(i._ZN8standard7FastChkEv) referenced from standard.o(.constdata__ZTV8standard)
 <LI><a href="#[59]">standard::SlowChk()</a> from standard.o(i._ZN8standard7SlowChkEv) referenced from standard.o(.constdata__ZTV8standard)
 <LI><a href="#[5e]">__main</a> from __main.o(!!!main) referenced from startup_gd32f30x_hd.o(.text)
 <LI><a href="#[5c]">__sti___12_variable_cpp_9fbe3ce0</a> from variable.o(i.__sti___12_variable_cpp_9fbe3ce0) referenced from variable.o(.init_array)
 <LI><a href="#[5b]">__sti___13_appTaskOs_cpp_fa29720b</a> from apptaskos.o(i.__sti___13_appTaskOs_cpp_fa29720b) referenced from apptaskos.o(.init_array)
 <LI><a href="#[5d]">__sti___8_arch_cpp_4222c476</a> from arch.o(i.__sti___8_arch_cpp_4222c476) referenced from arch.o(.init_array)
 <LI><a href="#[58]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[57]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5e]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[60]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[62]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[14c]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[14d]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[63]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[14e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[6a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[64]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[14f]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[150]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[151]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[152]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[66]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[153]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[154]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[155]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[156]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[157]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[158]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[159]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[15a]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[15b]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[15c]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[15d]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[15e]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[15f]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[160]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[161]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[162]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[6f]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[163]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[164]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[165]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[166]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[167]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[168]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[169]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[61]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[16a]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[67]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[69]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[16b]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[6b]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; TaskCreat &rArr; vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[16c]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[77]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[6e]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[16d]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[70]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[10]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[143]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[142]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[12]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16e]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[a]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ADC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>ADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA1_Channel3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIMER0_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIMER0_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIMER0_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIMER7_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIMER7_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIMER7_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>USBD_HP_CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>USBD_LP_CAN0_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USBD_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[10d]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSave::Init(void*)
</UL>

<P><STRONG><a name="[73]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[16f]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[170]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[174]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[6d]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[71]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[177]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[178]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>ARCH_FlashHalfWord</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, arch.o(i.ARCH_FlashHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ARCH_FlashHalfWord &rArr; fmc_halfword_program &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_halfword_program
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSave::Init(void*)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSave::WriteToFlash()
</UL>

<P><STRONG><a name="[17b]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[e]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, arch.o(i.DMA0_Channel0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DMA0_Channel0_IRQHandler &rArr; IsrDeal &rArr; buckboost::Regulation(float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_get
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_clear
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample::OffsetCalibrate()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrtime::calc2()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrDeal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f5]"></a>Filter</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, datacalc.o(i.Filter))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataCalc::Calc()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataCalc::Add()
</UL>

<P><STRONG><a name="[c]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[113]"></a>InformBMUEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch.o(i.InformBMUEnd))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::WakeBmu()
</UL>

<P><STRONG><a name="[112]"></a>InformBMUStart</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch.o(i.InformBMUStart))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::WakeBmu()
</UL>

<P><STRONG><a name="[82]"></a>InitADC</STRONG> (Thumb, 546 bytes, Stack size 56 bytes, arch.o(i.InitADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = InitADC &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_special_function_config
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_resolution_config
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_channel_config
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_mode_config
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_source_config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_config
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dma_mode_enable
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_data_alignment_config
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_length_config
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_enable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_enable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_enable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_adc_clock_config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay()
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart(void*)
</UL>

<P><STRONG><a name="[99]"></a>InitBSP</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, arch.o(i.InitBSP))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = InitBSP &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_counter_value_config
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart(void*)
</UL>

<P><STRONG><a name="[9f]"></a>InitGPIO</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, arch.o(i.InitGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = InitGPIO &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart(void*)
</UL>

<P><STRONG><a name="[a2]"></a>InitPWM</STRONG> (Thumb, 966 bytes, Stack size 80 bytes, arch.o(i.InitPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = InitPWM &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update_source_config
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update_event_enable
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_slave_mode_select
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_master_slave_mode_config
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_master_output_trigger_source_select
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_input_trigger_source_select
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_counter_value_config
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_shadow_config
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_mode_config
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_fast_config
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_config
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_break_config
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart(void*)
</UL>

<P><STRONG><a name="[80]"></a>IsrDeal</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, apptaskos.o(i.IsrDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IsrDeal &rArr; buckboost::Regulation(float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::FastOff()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buckboost::Regulation(float, float)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataCalc::Add()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::check()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample::DataDeal()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel0_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>JumpTo</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, arch.o(i.JumpTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = JumpTo &rArr; dma_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_disable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_disable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::BMUConmunicate()
</UL>

<P><STRONG><a name="[d]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>SEGGER_RTT_ConfigUpBuffer</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, segger_rtt.o(i.SEGGER_RTT_ConfigUpBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SEGGER_RTT_ConfigUpBuffer &rArr; _DoInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart(void*)
</UL>

<P><STRONG><a name="[13]"></a>SysTick_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>WakeBMUEnd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, arch.o(i.WakeBMUEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WakeBMUEnd &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::WakeBmu()
</UL>

<P><STRONG><a name="[bc]"></a>WakeBMUStart</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, arch.o(i.WakeBMUStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WakeBMUStart &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::WakeBmu()
</UL>

<P><STRONG><a name="[50]"></a>SystemInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, system_gd32f30x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(.text)
</UL>
<P><STRONG><a name="[bf]"></a>TaskCreat</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, apptaskos.o(i.TaskCreat))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TaskCreat &rArr; vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>Delay()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, arch.o(i._Z5Delayv))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC
</UL>

<P><STRONG><a name="[56]"></a>Task1s(void*)</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, apptaskos.o(i._Z6Task1sPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Task1s(void*) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Address Reference Count : 1]<UL><LI> apptaskos.o(i._Z9TaskStartPv)
</UL>
<P><STRONG><a name="[53]"></a>Task2ms(void*)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, apptaskos.o(i._Z7Task2msPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Task2ms(void*) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::BuckBoostStateShift()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::BMUConmunicate()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::FaultCollect()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buckboost::IpvSoftStart()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol::deal()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> apptaskos.o(i._Z9TaskStartPv)
</UL>
<P><STRONG><a name="[54]"></a>Task10ms(void*)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, apptaskos.o(i._Z8Task10msPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Task10ms(void*) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::TemperatureChk()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataCalc::Save()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataCalc::Calc()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> apptaskos.o(i._Z9TaskStartPv)
</UL>
<P><STRONG><a name="[55]"></a>Task100ms(void*)</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, apptaskos.o(i._Z9Task100msPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Task100ms(void*) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::WakeBmu()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> apptaskos.o(i._Z9TaskStartPv)
</UL>
<P><STRONG><a name="[52]"></a>TaskStart(void*)</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, apptaskos.o(i._Z9TaskStartPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TaskStart(void*) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::init()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSave::Init(void*)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol::CalibrateCoffInit(unsigned short, unsigned short)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample::CalibrateInDc2Volt(unsigned short)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample::CalibrateInDc2Curr(unsigned short)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample::CalibrateInDcVolt(unsigned short)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample::CalibrateInDcCurr(unsigned short)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample::CalibrateBattVolt(unsigned short)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample::CalibrateBattCurr(unsigned short)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigUpBuffer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPIO
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBSP
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> apptaskos.o(i.TaskCreat)
</UL>
<P><STRONG><a name="[111]"></a>multistate::SetPara(unsigned short, const float*, float)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, multistate.o(i._ZN10multistate7SetParaEtPKff))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::init()
</UL>

<P><STRONG><a name="[10e]"></a>multistate::execute(float)</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, multistate.o(i._ZN10multistate7executeEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = multistate::execute(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::TemperatureChk()
</UL>

<P><STRONG><a name="[116]"></a>multistate::multistate()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, multistate.o(i._ZN10multistateC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::worklogic()
</UL>

<P><STRONG><a name="[17c]"></a>multistate::multistate__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, multistate.o(i._ZN10multistateC1Ev), UNUSED)

<P><STRONG><a name="[ff]"></a>PIController::run(float)</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, buckboost.o(i._ZN12PIController3runEf))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buckboost::Regulation(float, float)
</UL>

<P><STRONG><a name="[100]"></a>PIController::SetMax(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, picontroller.o(i._ZN12PIController6SetMaxEf))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buckboost::Regulation(float, float)
</UL>

<P><STRONG><a name="[101]"></a>PIController::SetMin(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, picontroller.o(i._ZN12PIController6SetMinEf))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buckboost::Regulation(float, float)
</UL>

<P><STRONG><a name="[e2]"></a>PIController::SetPara(float, float, float, float, float)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, picontroller.o(i._ZN12PIController7SetParaEfffff))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rated::renewParam(float, float)
</UL>

<P><STRONG><a name="[fe]"></a>PIController::SetInteg(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, picontroller.o(i._ZN12PIController8SetIntegEf))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buckboost::Regulation(float, float)
</UL>

<P><STRONG><a name="[103]"></a>PIController::PIController()</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, picontroller.o(i._ZN12PIControllerC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buckboost::buckboost()
</UL>

<P><STRONG><a name="[17d]"></a>PIController::PIController__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, picontroller.o(i._ZN12PIControllerC1Ev), UNUSED)

<P><STRONG><a name="[d7]"></a>ntc::SetNtcLine(unsigned short, const float*, const line*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ntc.o(i._ZN3ntc10SetNtcLineEtPKfPK4line))
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;piecewise::SetPara(unsigned short, const float*, const line*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::init()
</UL>

<P><STRONG><a name="[d9]"></a>ntc::CalcAdToTemp(float)</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ntc.o(i._ZN3ntc12CalcAdToTempEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ntc::CalcAdToTemp(float) &rArr; piecewise::GetValueHalf(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;piecewise::IsSet()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;piecewise::GetValueHalf(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::TemperatureChk()
</UL>

<P><STRONG><a name="[dc]"></a>ntc::ntc()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ntc.o(i._ZN3ntcC1Ev))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;piecewise::piecewise()
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::worklogic()
</UL>

<P><STRONG><a name="[17e]"></a>ntc::ntc__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ntc.o(i._ZN3ntcC1Ev), UNUSED)

<P><STRONG><a name="[110]"></a>mppt::SetPowerLimit(float)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mppt.o(i._ZN4mppt13SetPowerLimitEf))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::BuckBoostStateShift()
</UL>

<P><STRONG><a name="[df]"></a>mppt::rst()</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, mppt.o(i._ZN4mppt3rstEv))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mppt::mppt()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::BuckBoostStateShift()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mppt::run(float, float)
</UL>

<P><STRONG><a name="[de]"></a>mppt::run(float, float)</STRONG> (Thumb, 490 bytes, Stack size 20 bytes, mppt.o(i._ZN4mppt3runEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mppt::run(float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mppt::rst()
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::BuckBoostStateShift()
</UL>

<P><STRONG><a name="[10f]"></a>mppt::SetUoc(float)</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, mppt.o(i._ZN4mppt6SetUocEf))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::BuckBoostStateShift()
</UL>

<P><STRONG><a name="[e0]"></a>mppt::mppt()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, mppt.o(i._ZN4mpptC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mppt::mppt()
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mppt::rst()
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_variable_cpp_9fbe3ce0
</UL>

<P><STRONG><a name="[17f]"></a>mppt::mppt__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, mppt.o(i._ZN4mpptC1Ev), UNUSED)

<P><STRONG><a name="[e1]"></a>rated::renewParam(float, float)</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, rated.o(i._ZN5rated10renewParamEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rated::renewParam(float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIController::SetPara(float, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::init()
</UL>

<P><STRONG><a name="[118]"></a>rated::rated()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rated.o(i._ZN5ratedC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_variable_cpp_9fbe3ce0
</UL>

<P><STRONG><a name="[180]"></a>rated::rated__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rated.o(i._ZN5ratedC1Ev), UNUSED)

<P><STRONG><a name="[e3]"></a>sample::CaliDataLmt(unsigned short*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sample.o(i._ZN6sample11CaliDataLmtEPt))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample::CalibrateInDc2Volt(unsigned short)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample::CalibrateInDc2Curr(unsigned short)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample::CalibrateInDcVolt(unsigned short)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample::CalibrateInDcCurr(unsigned short)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample::CalibrateBattVolt(unsigned short)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample::CalibrateBattCurr(unsigned short)
</UL>

<P><STRONG><a name="[7f]"></a>sample::OffsetCalibrate()</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, sample.o(i._ZN6sample15OffsetCalibrateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sample::OffsetCalibrate()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel0_IRQHandler
</UL>

<P><STRONG><a name="[d6]"></a>sample::CalibrateBattCurr(unsigned short)</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, sample.o(i._ZN6sample17CalibrateBattCurrEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sample::CalibrateBattCurr(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample::CaliDataLmt(unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::BMUConmunicate()
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart(void*)
</UL>

<P><STRONG><a name="[d3]"></a>sample::CalibrateBattVolt(unsigned short)</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, sample.o(i._ZN6sample17CalibrateBattVoltEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sample::CalibrateBattVolt(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample::CaliDataLmt(unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::BMUConmunicate()
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart(void*)
</UL>

<P><STRONG><a name="[d4]"></a>sample::CalibrateInDcCurr(unsigned short)</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, sample.o(i._ZN6sample17CalibrateInDcCurrEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sample::CalibrateInDcCurr(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample::CaliDataLmt(unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::BMUConmunicate()
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart(void*)
</UL>

<P><STRONG><a name="[d0]"></a>sample::CalibrateInDcVolt(unsigned short)</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, sample.o(i._ZN6sample17CalibrateInDcVoltEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sample::CalibrateInDcVolt(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample::CaliDataLmt(unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::BMUConmunicate()
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart(void*)
</UL>

<P><STRONG><a name="[d5]"></a>sample::CalibrateInDc2Curr(unsigned short)</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, sample.o(i._ZN6sample18CalibrateInDc2CurrEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sample::CalibrateInDc2Curr(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample::CaliDataLmt(unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::BMUConmunicate()
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart(void*)
</UL>

<P><STRONG><a name="[d2]"></a>sample::CalibrateInDc2Volt(unsigned short)</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, sample.o(i._ZN6sample18CalibrateInDc2VoltEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sample::CalibrateInDc2Volt(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample::CaliDataLmt(unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::BMUConmunicate()
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart(void*)
</UL>

<P><STRONG><a name="[af]"></a>sample::DataDeal()</STRONG> (Thumb, 470 bytes, Stack size 0 bytes, sample.o(i._ZN6sample8DataDealEv))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrDeal
</UL>

<P><STRONG><a name="[117]"></a>sample::sample()</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, sample.o(i._ZN6sampleC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_variable_cpp_9fbe3ce0
</UL>

<P><STRONG><a name="[181]"></a>sample::sample__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, sample.o(i._ZN6sampleC1Ev), UNUSED)

<P><STRONG><a name="[81]"></a>isrtime::calc2()</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, isrtime.o(i._ZN7isrtime5calc2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel0_IRQHandler
</UL>

<P><STRONG><a name="[11c]"></a>isrtime::isrtime()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, isrtime.o(i._ZN7isrtimeC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_arch_cpp_4222c476
</UL>

<P><STRONG><a name="[182]"></a>isrtime::isrtime__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, isrtime.o(i._ZN7isrtimeC1Ev), UNUSED)

<P><STRONG><a name="[f6]"></a>uartDrv::rev(unsigned char*, unsigned short)</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, uartdrv.o(i._ZN7uartDrv3revEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uartDrv::rev(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol::deal()
</UL>

<P><STRONG><a name="[e4]"></a>uartDrv::init()</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, uartdrv.o(i._ZN7uartDrv4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = uartDrv::init() &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_transmit_config
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_first_config
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol::SetPara(const uartPara*)
</UL>

<P><STRONG><a name="[ed]"></a>uartDrv::send(unsigned char*, unsigned short)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, uartdrv.o(i._ZN7uartDrv4sendEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uartDrv::send(unsigned char*, unsigned short) &rArr; dma_transfer_number_config
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_config
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_address_config
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_clear
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol::deal()
</UL>

<P><STRONG><a name="[b3]"></a>uartDrv::check()</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, uartdrv.o(i._ZN7uartDrv5checkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uartDrv::check() &rArr; dma_channel_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_get
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_clear
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrDeal
</UL>

<P><STRONG><a name="[fa]"></a>uartDrv::uartDrv()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uartdrv.o(i._ZN7uartDrvC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol::protocol()
</UL>

<P><STRONG><a name="[183]"></a>uartDrv::uartDrv__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uartdrv.o(i._ZN7uartDrvC1Ev), UNUSED)

<P><STRONG><a name="[b2]"></a>dataCalc::Add()</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, datacalc.o(i._ZN8dataCalc3AddEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dataCalc::Add()
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrDeal
</UL>

<P><STRONG><a name="[cc]"></a>dataCalc::Calc()</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, datacalc.o(i._ZN8dataCalc4CalcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dataCalc::Calc()
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task10ms(void*)
</UL>

<P><STRONG><a name="[cb]"></a>dataCalc::Save()</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, datacalc.o(i._ZN8dataCalc4SaveEv))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task10ms(void*)
</UL>

<P><STRONG><a name="[119]"></a>dataCalc::dataCalc()</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, datacalc.o(i._ZN8dataCalcC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_variable_cpp_9fbe3ce0
</UL>

<P><STRONG><a name="[184]"></a>dataCalc::dataCalc__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, datacalc.o(i._ZN8dataCalcC1Ev), UNUSED)

<P><STRONG><a name="[fc]"></a>faultChk::RetChkHigh(float, faultChkRetType*)</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, standard.o(i._ZN8faultChk10RetChkHighEfP15faultChkRetType))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standard::SlowChk()
</UL>

<P><STRONG><a name="[fd]"></a>faultChk::RetChkLow(float, faultChkRetType*)</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, standard.o(i._ZN8faultChk9RetChkLowEfP15faultChkRetType))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standard::SlowChk()
</UL>

<P><STRONG><a name="[115]"></a>faultChk::faultChk()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, faultchk.o(i._ZN8faultChkC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::worklogic()
</UL>

<P><STRONG><a name="[185]"></a>faultChk::faultChk__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faultchk.o(i._ZN8faultChkC1Ev), UNUSED)

<P><STRONG><a name="[d1]"></a>protocol::CalibrateCoffInit(unsigned short, unsigned short)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, protocol.o(i._ZN8protocol17CalibrateCoffInitEtt))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart(void*)
</UL>

<P><STRONG><a name="[c9]"></a>protocol::deal()</STRONG> (Thumb, 966 bytes, Stack size 40 bytes, protocol.o(i._ZN8protocol4dealEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = protocol::deal() &rArr; uartDrv::send(unsigned char*, unsigned short) &rArr; dma_transfer_number_config
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_modbus
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::send(unsigned char*, unsigned short)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::rev(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task2ms(void*)
</UL>

<P><STRONG><a name="[f8]"></a>protocol::SetPara(const uartPara*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, protocol.o(i._ZN8protocol7SetParaEPK8uartPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = protocol::SetPara(const uartPara*) &rArr; uartDrv::init() &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::init()
</UL>

<P><STRONG><a name="[f9]"></a>protocol::protocol()</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, protocol.o(i._ZN8protocolC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = protocol::protocol()
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::uartDrv()
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_variable_cpp_9fbe3ce0
</UL>

<P><STRONG><a name="[186]"></a>protocol::protocol__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, protocol.o(i._ZN8protocolC1Ev), UNUSED)

<P><STRONG><a name="[5a]"></a>standard::FastChk()</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, standard.o(i._ZN8standard7FastChkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = standard::FastChk()
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> standard.o(.constdata__ZTV8standard)
</UL>
<P><STRONG><a name="[59]"></a>standard::SlowChk()</STRONG> (Thumb, 334 bytes, Stack size 48 bytes, standard.o(i._ZN8standard7SlowChkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = standard::SlowChk()
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;faultChk::RetChkLow(float, faultChkRetType*)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;faultChk::RetChkHigh(float, faultChkRetType*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> standard.o(.constdata__ZTV8standard)
</UL>
<P><STRONG><a name="[11a]"></a>standard::standard()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, standard.o(i._ZN8standardC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_variable_cpp_9fbe3ce0
</UL>

<P><STRONG><a name="[187]"></a>standard::standard__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, standard.o(i._ZN8standardC1Ev), UNUSED)

<P><STRONG><a name="[b0]"></a>buckboost::Regulation(float, float)</STRONG> (Thumb, 980 bytes, Stack size 40 bytes, buckboost.o(i._ZN9buckboost10RegulationEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = buckboost::Regulation(float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIController::run(float)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIController::SetInteg(float)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIController::SetMin(float)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIController::SetMax(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrDeal
</UL>

<P><STRONG><a name="[c8]"></a>buckboost::IpvSoftStart()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, buckboost.o(i._ZN9buckboost12IpvSoftStartEv))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task2ms(void*)
</UL>

<P><STRONG><a name="[102]"></a>buckboost::buckboost()</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, buckboost.o(i._ZN9buckboostC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = buckboost::buckboost()
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIController::PIController()
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_variable_cpp_9fbe3ce0
</UL>

<P><STRONG><a name="[188]"></a>buckboost::buckboost__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, buckboost.o(i._ZN9buckboostC1Ev), UNUSED)

<P><STRONG><a name="[10c]"></a>flashSave::GetSaveLen()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, flashsave.o(i._ZN9flashSave10GetSaveLenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flashSave::GetSaveLen()
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSave::Init(void*)
</UL>

<P><STRONG><a name="[104]"></a>flashSave::WriteToFlash()</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, flashsave.o(i._ZN9flashSave12WriteToFlashEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = flashSave::WriteToFlash() &rArr; ARCH_FlashHalfWord &rArr; fmc_halfword_program &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_modbus
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARCH_FlashHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::BMUConmunicate()
</UL>

<P><STRONG><a name="[105]"></a>flashSave::SetBattCurrCoff(unsigned short)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, flashsave.o(i._ZN9flashSave15SetBattCurrCoffEt))
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSave::DataLmt(unsigned short*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::BMUConmunicate()
</UL>

<P><STRONG><a name="[107]"></a>flashSave::SetBattVoltCoff(unsigned short)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, flashsave.o(i._ZN9flashSave15SetBattVoltCoffEt))
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSave::DataLmt(unsigned short*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::BMUConmunicate()
</UL>

<P><STRONG><a name="[108]"></a>flashSave::SetInDcCurrCoff(unsigned short)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, flashsave.o(i._ZN9flashSave15SetInDcCurrCoffEt))
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSave::DataLmt(unsigned short*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::BMUConmunicate()
</UL>

<P><STRONG><a name="[109]"></a>flashSave::SetInDcVoltCoff(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flashsave.o(i._ZN9flashSave15SetInDcVoltCoffEt))
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSave::DataLmt(unsigned short*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::BMUConmunicate()
</UL>

<P><STRONG><a name="[10a]"></a>flashSave::SetInDc2CurrCoff(unsigned short)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, flashsave.o(i._ZN9flashSave16SetInDc2CurrCoffEt))
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSave::DataLmt(unsigned short*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::BMUConmunicate()
</UL>

<P><STRONG><a name="[10b]"></a>flashSave::SetInDc2VoltCoff(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flashsave.o(i._ZN9flashSave16SetInDc2VoltCoffEt))
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSave::DataLmt(unsigned short*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::BMUConmunicate()
</UL>

<P><STRONG><a name="[cf]"></a>flashSave::Init(void*)</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, flashsave.o(i._ZN9flashSave4InitEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = flashSave::Init(void*) &rArr; ARCH_FlashHalfWord &rArr; fmc_halfword_program &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_modbus
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARCH_FlashHalfWord
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSave::GetSaveLen()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart(void*)
</UL>

<P><STRONG><a name="[106]"></a>flashSave::DataLmt(unsigned short*, unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, flashsave.o(i._ZN9flashSave7DataLmtEPtt))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSave::SetInDc2VoltCoff(unsigned short)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSave::SetInDc2CurrCoff(unsigned short)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSave::SetInDcVoltCoff(unsigned short)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSave::SetInDcCurrCoff(unsigned short)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSave::SetBattVoltCoff(unsigned short)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSave::SetBattCurrCoff(unsigned short)
</UL>

<P><STRONG><a name="[11b]"></a>flashSave::flashSave()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flashsave.o(i._ZN9flashSaveC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_variable_cpp_9fbe3ce0
</UL>

<P><STRONG><a name="[189]"></a>flashSave::flashSave__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, flashsave.o(i._ZN9flashSaveC1Ev), UNUSED)

<P><STRONG><a name="[db]"></a>piecewise::GetValueHalf(float)</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, piecewise.o(i._ZN9piecewise12GetValueHalfEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = piecewise::GetValueHalf(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntc::CalcAdToTemp(float)
</UL>

<P><STRONG><a name="[da]"></a>piecewise::IsSet()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ntc.o(i._ZN9piecewise5IsSetEv))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntc::CalcAdToTemp(float)
</UL>

<P><STRONG><a name="[d8]"></a>piecewise::SetPara(unsigned short, const float*, const line*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, piecewise.o(i._ZN9piecewise7SetParaEtPKfPK4line))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::init()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntc::SetNtcLine(unsigned short, const float*, const line*)
</UL>

<P><STRONG><a name="[dd]"></a>piecewise::piecewise()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, piecewise.o(i._ZN9piecewiseC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::worklogic()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntc::ntc()
</UL>

<P><STRONG><a name="[18a]"></a>piecewise::piecewise__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, piecewise.o(i._ZN9piecewiseC1Ev), UNUSED)

<P><STRONG><a name="[c5]"></a>worklogic::FaultCollect()</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, worklogic.o(i._ZN9worklogic12FaultCollectEv))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task2ms(void*)
</UL>

<P><STRONG><a name="[c7]"></a>worklogic::BMUConmunicate()</STRONG> (Thumb, 1084 bytes, Stack size 32 bytes, worklogic.o(i._ZN9worklogic14BMUConmunicateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = worklogic::BMUConmunicate() &rArr; flashSave::WriteToFlash() &rArr; ARCH_FlashHalfWord &rArr; fmc_halfword_program &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample::CalibrateInDc2Volt(unsigned short)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample::CalibrateInDc2Curr(unsigned short)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample::CalibrateInDcVolt(unsigned short)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample::CalibrateInDcCurr(unsigned short)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample::CalibrateBattVolt(unsigned short)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample::CalibrateBattCurr(unsigned short)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSave::SetInDc2VoltCoff(unsigned short)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSave::SetInDc2CurrCoff(unsigned short)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSave::SetInDcVoltCoff(unsigned short)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSave::SetInDcCurrCoff(unsigned short)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSave::SetBattVoltCoff(unsigned short)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSave::SetBattCurrCoff(unsigned short)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSave::WriteToFlash()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpTo
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task2ms(void*)
</UL>

<P><STRONG><a name="[ca]"></a>worklogic::TemperatureChk()</STRONG> (Thumb, 476 bytes, Stack size 40 bytes, worklogic.o(i._ZN9worklogic14TemperatureChkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = worklogic::TemperatureChk() &rArr; ntc::CalcAdToTemp(float) &rArr; piecewise::GetValueHalf(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multistate::execute(float)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntc::CalcAdToTemp(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task10ms(void*)
</UL>

<P><STRONG><a name="[c6]"></a>worklogic::BuckBoostStateShift()</STRONG> (Thumb, 1054 bytes, Stack size 56 bytes, worklogic.o(i._ZN9worklogic19BuckBoostStateShiftEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = worklogic::BuckBoostStateShift() &rArr; mppt::run(float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mppt::SetUoc(float)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mppt::run(float, float)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mppt::rst()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mppt::SetPowerLimit(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task2ms(void*)
</UL>

<P><STRONG><a name="[ce]"></a>worklogic::init()</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, worklogic.o(i._ZN9worklogic4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = worklogic::init() &rArr; protocol::SetPara(const uartPara*) &rArr; uartDrv::init() &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol::SetPara(const uartPara*)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multistate::SetPara(unsigned short, const float*, float)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntc::SetNtcLine(unsigned short, const float*, const line*)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;piecewise::SetPara(unsigned short, const float*, const line*)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rated::renewParam(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart(void*)
</UL>

<P><STRONG><a name="[b1]"></a>worklogic::FastOff()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, worklogic.o(i._ZN9worklogic7FastOffEv))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrDeal
</UL>

<P><STRONG><a name="[cd]"></a>worklogic::WakeBmu()</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, worklogic.o(i._ZN9worklogic7WakeBmuEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = worklogic::WakeBmu() &rArr; WakeBMUStart &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeBMUStart
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeBMUEnd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InformBMUStart
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InformBMUEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task100ms(void*)
</UL>

<P><STRONG><a name="[114]"></a>worklogic::worklogic()</STRONG> (Thumb, 310 bytes, Stack size 8 bytes, worklogic.o(i._ZN9worklogicC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = worklogic::worklogic()
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multistate::multistate()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntc::ntc()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;piecewise::piecewise()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;faultChk::faultChk()
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___13_appTaskOs_cpp_fa29720b
</UL>

<P><STRONG><a name="[18b]"></a>worklogic::worklogic__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, worklogic.o(i._ZN9worklogicC1Ev), UNUSED)

<P><STRONG><a name="[96]"></a>adc_calibration_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_calibration_enable))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC
</UL>

<P><STRONG><a name="[90]"></a>adc_channel_length_config</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_channel_length_config))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC
</UL>

<P><STRONG><a name="[8f]"></a>adc_data_alignment_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_data_alignment_config))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC
</UL>

<P><STRONG><a name="[8a]"></a>adc_deinit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, gd32f30x_adc.o(i.adc_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpTo
</UL>

<P><STRONG><a name="[97]"></a>adc_dma_mode_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_dma_mode_enable))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC
</UL>

<P><STRONG><a name="[94]"></a>adc_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_enable))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC
</UL>

<P><STRONG><a name="[92]"></a>adc_external_trigger_config</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_external_trigger_config))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC
</UL>

<P><STRONG><a name="[8d]"></a>adc_external_trigger_source_config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_external_trigger_source_config))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC
</UL>

<P><STRONG><a name="[8b]"></a>adc_mode_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC
</UL>

<P><STRONG><a name="[91]"></a>adc_regular_channel_config</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, gd32f30x_adc.o(i.adc_regular_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_regular_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC
</UL>

<P><STRONG><a name="[8e]"></a>adc_resolution_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_resolution_config))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC
</UL>

<P><STRONG><a name="[8c]"></a>adc_special_function_config</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_special_function_config))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC
</UL>

<P><STRONG><a name="[f7]"></a>crc_modbus</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, func.o(i.crc_modbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = crc_modbus &rArr; init_crc16_tab()
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_crc16_tab()
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSave::Init(void*)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol::deal()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSave::WriteToFlash()
</UL>

<P><STRONG><a name="[f3]"></a>dma_channel_disable</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gd32f30x_dma.o(i.dma_channel_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_channel_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::check()
</UL>

<P><STRONG><a name="[98]"></a>dma_channel_enable</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gd32f30x_dma.o(i.dma_channel_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_channel_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::send(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[87]"></a>dma_circulation_enable</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gd32f30x_dma.o(i.dma_circulation_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_circulation_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC
</UL>

<P><STRONG><a name="[85]"></a>dma_deinit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gd32f30x_dma.o(i.dma_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::init()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpTo
</UL>

<P><STRONG><a name="[f0]"></a>dma_flag_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f30x_dma.o(i.dma_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::check()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::send(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[f2]"></a>dma_flag_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_dma.o(i.dma_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::check()
</UL>

<P><STRONG><a name="[86]"></a>dma_init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, gd32f30x_dma.o(i.dma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_init
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::init()
</UL>

<P><STRONG><a name="[88]"></a>dma_interrupt_enable</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gd32f30x_dma.o(i.dma_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC
</UL>

<P><STRONG><a name="[7e]"></a>dma_interrupt_flag_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f30x_dma.o(i.dma_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel0_IRQHandler
</UL>

<P><STRONG><a name="[7d]"></a>dma_interrupt_flag_get</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, gd32f30x_dma.o(i.dma_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel0_IRQHandler
</UL>

<P><STRONG><a name="[ee]"></a>dma_memory_address_config</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gd32f30x_dma.o(i.dma_memory_address_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_memory_address_config
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::send(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[ef]"></a>dma_transfer_number_config</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gd32f30x_dma.o(i.dma_transfer_number_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_transfer_number_config
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::send(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[121]"></a>fmc_bank0_ready_wait</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, gd32f30x_fmc.o(i.fmc_bank0_ready_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_bank0_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_halfword_program
</UL>

<P><STRONG><a name="[122]"></a>fmc_bank0_state_get</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gd32f30x_fmc.o(i.fmc_bank0_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_ready_wait
</UL>

<P><STRONG><a name="[123]"></a>fmc_bank1_ready_wait</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, gd32f30x_fmc.o(i.fmc_bank1_ready_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_halfword_program
</UL>

<P><STRONG><a name="[124]"></a>fmc_bank1_state_get</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gd32f30x_fmc.o(i.fmc_bank1_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_ready_wait
</UL>

<P><STRONG><a name="[7b]"></a>fmc_halfword_program</STRONG> (Thumb, 134 bytes, Stack size 20 bytes, gd32f30x_fmc.o(i.fmc_halfword_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fmc_halfword_program &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_ready_wait
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARCH_FlashHalfWord
</UL>

<P><STRONG><a name="[7c]"></a>fmc_lock</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f30x_fmc.o(i.fmc_lock))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARCH_FlashHalfWord
</UL>

<P><STRONG><a name="[7a]"></a>fmc_page_erase</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, gd32f30x_fmc.o(i.fmc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fmc_page_erase &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_ready_wait
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARCH_FlashHalfWord
</UL>

<P><STRONG><a name="[79]"></a>fmc_unlock</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gd32f30x_fmc.o(i.fmc_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARCH_FlashHalfWord
</UL>

<P><STRONG><a name="[a1]"></a>gpio_bit_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_gpio.o(i.gpio_bit_reset))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::check()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPIO
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task100ms(void*)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task1s(void*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::init()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeBMUEnd
</UL>

<P><STRONG><a name="[bd]"></a>gpio_bit_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_gpio.o(i.gpio_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task100ms(void*)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task1s(void*)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::send(unsigned char*, unsigned short)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeBMUStart
</UL>

<P><STRONG><a name="[93]"></a>gpio_init</STRONG> (Thumb, 164 bytes, Stack size 28 bytes, gd32f30x_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPIO
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::init()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeBMUStart
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeBMUEnd
</UL>

<P><STRONG><a name="[fb]"></a>gpio_input_bit_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f30x_gpio.o(i.gpio_input_bit_get))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standard::FastChk()
</UL>

<P><STRONG><a name="[a0]"></a>gpio_pin_remap_config</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, gd32f30x_gpio.o(i.gpio_pin_remap_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPIO
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::init()
</UL>

<P><STRONG><a name="[6c]"></a>main</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = main &rArr; TaskCreat &rArr; vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCreat
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b5]"></a>nvic_irq_disable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f30x_misc.o(i.nvic_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpTo
</UL>

<P><STRONG><a name="[89]"></a>nvic_irq_enable</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, gd32f30x_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC
</UL>

<P><STRONG><a name="[9a]"></a>nvic_priority_group_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_misc.o(i.nvic_priority_group_set))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBSP
</UL>

<P><STRONG><a name="[125]"></a>nvic_vector_table_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_misc.o(i.nvic_vector_table_set))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[144]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[133]"></a>pxPortInitialiseStack</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[83]"></a>rcu_adc_clock_config</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, gd32f30x_rcu.o(i.rcu_adc_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_adc_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC
</UL>

<P><STRONG><a name="[13a]"></a>rcu_clock_freq_get</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, gd32f30x_rcu.o(i.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[b7]"></a>rcu_periph_clock_disable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_periph_clock_disable))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpTo
</UL>

<P><STRONG><a name="[84]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPIO
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBSP
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::init()
</UL>

<P><STRONG><a name="[11e]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>

<P><STRONG><a name="[11d]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>

<P><STRONG><a name="[ae]"></a>timer_break_config</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gd32f30x_timer.o(i.timer_break_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_break_config
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM
</UL>

<P><STRONG><a name="[a6]"></a>timer_channel_output_config</STRONG> (Thumb, 464 bytes, Stack size 12 bytes, gd32f30x_timer.o(i.timer_channel_output_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = timer_channel_output_config
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM
</UL>

<P><STRONG><a name="[ac]"></a>timer_channel_output_fast_config</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_channel_output_fast_config))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM
</UL>

<P><STRONG><a name="[a8]"></a>timer_channel_output_mode_config</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_channel_output_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM
</UL>

<P><STRONG><a name="[a7]"></a>timer_channel_output_pulse_value_config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_channel_output_pulse_value_config))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM
</UL>

<P><STRONG><a name="[ad]"></a>timer_channel_output_shadow_config</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_channel_output_shadow_config))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM
</UL>

<P><STRONG><a name="[9d]"></a>timer_counter_value_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_counter_value_config))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBSP
</UL>

<P><STRONG><a name="[9b]"></a>timer_deinit</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, gd32f30x_timer.o(i.timer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBSP
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpTo
</UL>

<P><STRONG><a name="[9e]"></a>timer_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBSP
</UL>

<P><STRONG><a name="[9c]"></a>timer_init</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, gd32f30x_timer.o(i.timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBSP
</UL>

<P><STRONG><a name="[ab]"></a>timer_input_trigger_source_select</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_input_trigger_source_select))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM
</UL>

<P><STRONG><a name="[a5]"></a>timer_master_output_trigger_source_select</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_master_output_trigger_source_select))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM
</UL>

<P><STRONG><a name="[a9]"></a>timer_master_slave_mode_config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_master_slave_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM
</UL>

<P><STRONG><a name="[aa]"></a>timer_slave_mode_select</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_slave_mode_select))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM
</UL>

<P><STRONG><a name="[a3]"></a>timer_update_event_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_update_event_enable))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM
</UL>

<P><STRONG><a name="[a4]"></a>timer_update_source_config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_update_source_config))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM
</UL>

<P><STRONG><a name="[e5]"></a>usart_baudrate_set</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, gd32f30x_usart.o(i.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::init()
</UL>

<P><STRONG><a name="[e9]"></a>usart_data_first_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_data_first_config))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::init()
</UL>

<P><STRONG><a name="[f4]"></a>usart_data_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::check()
</UL>

<P><STRONG><a name="[b6]"></a>usart_deinit</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, gd32f30x_usart.o(i.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::init()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpTo
</UL>

<P><STRONG><a name="[eb]"></a>usart_dma_transmit_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_dma_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::init()
</UL>

<P><STRONG><a name="[ec]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::init()
</UL>

<P><STRONG><a name="[e6]"></a>usart_parity_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_parity_config))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::init()
</UL>

<P><STRONG><a name="[ea]"></a>usart_receive_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::init()
</UL>

<P><STRONG><a name="[e8]"></a>usart_stop_bit_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_stop_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::init()
</UL>

<P><STRONG><a name="[f1]"></a>usart_transmit_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::check()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::send(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[e7]"></a>usart_word_length_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_word_length_set))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartDrv::init()
</UL>

<P><STRONG><a name="[127]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[13f]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, apptaskos.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[13b]"></a>vApplicationTickHook</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, apptaskos.o(i.vApplicationTickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vApplicationTickHook &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[134]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[132]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[128]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[12c]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[12a]"></a>vPortEnterCritical</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[12d]"></a>vPortExitCritical</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[141]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[145]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[138]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[13d]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[13e]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[c2]"></a>vTaskStartScheduler</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCreat
</UL>

<P><STRONG><a name="[146]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[72]"></a>vTaskSwitchContext</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[140]"></a>xPortStartScheduler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[c1]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCreat
</UL>

<P><STRONG><a name="[130]"></a>xQueueGenericReset</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[13c]"></a>xQueueGiveFromISR</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
</UL>

<P><STRONG><a name="[c4]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetDisinheritPriorityAfterTimeout
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart(void*)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task100ms(void*)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task10ms(void*)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task2ms(void*)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task1s(void*)
</UL>

<P><STRONG><a name="[147]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[c0]"></a>xTaskCreateStatic</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart(void*)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCreat
</UL>

<P><STRONG><a name="[ba]"></a>xTaskIncrementTick</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[14a]"></a>xTaskPriorityInherit</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[137]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[148]"></a>xTaskResumeAll</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[65]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[18c]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[18d]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[139]"></a>system_clock_120m_hxtal</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, system_gd32f30x.o(i.system_clock_120m_hxtal))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[be]"></a>system_clock_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_gd32f30x.o(i.system_clock_config))
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_120m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[120]"></a>dma_periph_and_channel_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_dma.o(i.dma_periph_and_channel_check))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_config
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_address_config
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_enable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_enable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
</UL>

<P><STRONG><a name="[5b]"></a>__sti___13_appTaskOs_cpp_fa29720b</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, apptaskos.o(i.__sti___13_appTaskOs_cpp_fa29720b))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sti___13_appTaskOs_cpp_fa29720b &rArr; worklogic::worklogic()
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worklogic::worklogic()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> apptaskos.o(.init_array)
</UL>
<P><STRONG><a name="[11f]"></a>init_crc16_tab()</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, func.o(i._Z14init_crc16_tabv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = init_crc16_tab()
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_modbus
</UL>

<P><STRONG><a name="[5c]"></a>__sti___12_variable_cpp_9fbe3ce0</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, variable.o(i.__sti___12_variable_cpp_9fbe3ce0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __sti___12_variable_cpp_9fbe3ce0 &rArr; buckboost::buckboost()
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashSave::flashSave()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buckboost::buckboost()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standard::standard()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol::protocol()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataCalc::dataCalc()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample::sample()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rated::rated()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mppt::mppt()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> variable.o(.init_array)
</UL>
<P><STRONG><a name="[149]"></a>prvGetDisinheritPriorityAfterTimeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, queue.o(i.prvGetDisinheritPriorityAfterTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[12f]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>

<P><STRONG><a name="[135]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[136]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[126]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[129]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[12e]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[58]"></a>prvIdleTask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[131]"></a>prvInitialiseNewTask</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[12b]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[14b]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[57]"></a>prvTaskExitError</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[5d]"></a>__sti___8_arch_cpp_4222c476</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, arch.o(i.__sti___8_arch_cpp_4222c476))
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrtime::isrtime()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch.o(.init_array)
</UL>
<P><STRONG><a name="[b9]"></a>_DoInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _DoInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigUpBuffer
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
